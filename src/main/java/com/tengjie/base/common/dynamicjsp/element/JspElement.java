//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package com.tengjie.base.common.dynamicjsp.element;import java.lang.reflect.Field;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import org.apache.commons.collections.ListUtils;import org.apache.commons.lang3.StringUtils;import org.jsoup.nodes.Element;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public abstract class JspElement {    protected Logger logger = LoggerFactory.getLogger(this.getClass());    private String fieldName;    private String entityName;    protected String mainEntityNameForByFinder;    private String fieldChineseName;    protected String elementCode;    protected String childElementCode;    protected boolean ifFormElement;    protected boolean ifDynaTableElement;    protected List<JspElement> childList = Lists.newArrayList();        public TjLinkedMap<String, JspAttribute> attrMap = TjLinkedMap.newInstance();    public String showHideElExpress;    public String shiroHasPermission;    protected String html;    protected String queryCondPrintPrefix;    protected JspElement correspondJspElement;    private String tdId;    private static Map<String, String> filterFindWithCamelTableNameMap = null;    public abstract void initDefaultAttribute();    public void genCode() {        String newelementCode = this.appendFormPrefxi(this.ifFormElement, this.elementCode);        if (this.elementCode.equals("atagButton")) {            newelementCode = "a";        }        if (!this.elementCode.equals("text")) {            Element e = this.bulidElement(newelementCode, this.attrMap);            this.bulidElementChild_digui(e, this.childList);            this.html = e.outerHtml();            this.logger.debug(this.html);        }    }    public JspElement(String entityName, String fieldName) {        this.entityName = entityName;        this.fieldName = fieldName;        this.initDefaultAttribute();    }    public void parseEl(SpringElParse elParse) {        Iterator var3 = this.attrMap.entrySet().iterator();        while(var3.hasNext()) {            Entry<String, JspAttribute> entry = (Entry)var3.next();            JspAttribute ja = (JspAttribute)entry.getValue();            if (ja != null && ifElExpress(ja)) {                String dest = (String)elParse.parseElExpress(ja.getAttrCovertValue());                ja.setAttrCovertValue(dest);            }        }    }    public static boolean ifElExpress(JspAttribute ja) {        return ifElExpress(ja.getAttrCovertValue());    }    public static boolean ifElExpress(String express) {        boolean bl = false;        if (StringUtils.isEmpty(express)) {            return bl;        } else {            if (express.contains("StringUtils") || express.contains("ListUtils") || express.contains("JspTool") || express.contains("DateUtils") || express.contains("FieldValueConvertFinder")) {                bl = true;            }            if (express.contains("${")) {                bl = true;            }            return bl;        }    }    public static Map<String, String> findFilterFindWithCamelTableNameMap() {        if (filterFindWithCamelTableNameMap == null) {            filterFindWithCamelTableNameMap = Maps.newHashMap();            String tableNameStartWithOther = Global.getConfig("tableNameStartWithOther");            if (StringUtils.isNotEmpty(tableNameStartWithOther)) {                filterFindWithCamelTableNameMap.put("user", "apicloudSysUser");                filterFindWithCamelTableNameMap.put("dic", "apicloudSysDict");                filterFindWithCamelTableNameMap.put("log", "apicloudSysLog");                filterFindWithCamelTableNameMap.put("menu", "apicloudSysMenu");                filterFindWithCamelTableNameMap.put("sysRole", "apicloudSysRole");                filterFindWithCamelTableNameMap.put("sysRoleMenu", "apicloudSysRoleMenu");                filterFindWithCamelTableNameMap.put("sysUserRole", "apicloudSysUserRole");            }        }        return filterFindWithCamelTableNameMap;    }    public static String findWithCamelTableName(Class tableClass, boolean iffirstup) {        String simpleName = StringUtils.findClassSimpleName(tableClass, new boolean[]{iffirstup});        if (findFilterFindWithCamelTableNameMap().containsKey(simpleName)) {            return (String)findFilterFindWithCamelTableNameMap().get(simpleName);        } else if (simpleName.toLowerCase().equals("user")) {            return "sysUser";        } else {            Field ff;            if (simpleName.toLowerCase().equals("appuser")) {                ff = null;                try {                    ff = Reflections.getAccessibleField(tableClass, "_TB_TABLE_NAME_");                } catch (Exception var5) {                    ;                }                return ff != null ? "tbAppUser" : "tbUser";            } else {                ff = null;                try {                    ff = Reflections.getAccessibleField(tableClass, "_TB_TABLE_NAME_");                } catch (Exception var7) {                    ;                }                if (ff != null) {                    try {                        return ff.get(tableClass).toString();                    } catch (IllegalAccessException | IllegalArgumentException var6) {                        var6.printStackTrace();                        return null;                    }                } else {                    String tb = iffirstup ? "Tb" : "tb";                    return tb + StringUtils.firstToUpper(simpleName);                }            }        }    }    public static String getEntityNameByClass(Class tableClass, boolean... iffirstup) {        String entityName = tableClass.getSimpleName();        if (entityName.contains("$$")) {            entityName = entityName.substring(0, entityName.indexOf("$$"));        }        boolean firstup = iffirstup.length > 0 ? iffirstup[0] : false;        if (!firstup) {            entityName = StringUtils.firstToLower(entityName);        }        return entityName;    }    private String findTextContentByCssType(String textClassType) {        String cssContent = (String)this.findTextClassTypeCssContentMap().get(textClassType);        if (StringUtils.isEmpty(cssContent)) {            cssContent = "fa fa-edit";        }        return cssContent;    }    private Map<String, String> findTextClassTypeCssContentMap() {        Map<String, String> map = Maps.newHashMap();        map.put("0", "fa fa-edit");        map.put("1", "fa fa-edit");        map.put("2", "fa fa-trash");        return map;    }    protected String appendCtxELForUrl(String url) {        return url.startsWith("//") ? "${ctx}" + url : "${ctx}/" + url;    }    public String appendParamsNoCtxPrefixForUrl(String url, Map<String, String> params) {        if (StringUtils.isEmpty(url)) {            return null;        } else {            Entry entry;            if (params != null) {                for(Iterator var4 = params.entrySet().iterator(); var4.hasNext(); url = StringUtils.appendUrlParam(url, (String)entry.getKey(), (String)entry.getValue(), new boolean[]{false})) {                    entry = (Entry)var4.next();                }            }            return url;        }    }    public String appendParamsForUrl(String url, Map<String, String> params) {        if (StringUtils.isEmpty(url)) {            return null;        } else {            url = this.appendCtxELForUrl(url);            Entry entry;            if (params != null) {                for(Iterator var4 = params.entrySet().iterator(); var4.hasNext(); url = StringUtils.appendUrlParam(url, (String)entry.getKey(), (String)entry.getValue(), new boolean[]{false})) {                    entry = (Entry)var4.next();                }            }            return url;        }    }    protected void addChildList(JspElement[] childArray) {        List<JspElement> childList = this.findJspElemntByKebianCanshu(childArray);        this.getChildList().addAll(childList);    }    private List<JspElement> findJspElemntByKebianCanshu(JspElement... childArray) {        List<JspElement> list = ListUtils.arrayToList(childArray);        return list;    }    public static JspElement findMatchPureI(String classContent) {        JspElementI jes = (JspElementI)JspElementI.newInstance(classContent);        return jes;    }    public static JspElementSpan findMatchPureSpan(String fieldChineseName) {        JspElementSpan jes = (JspElementSpan)JspElementSpan.newInstance(fieldChineseName + ":", (String)null);        return jes;    }    public static JspElementTH findMatchPureTh(String fieldChineseName, boolean ifFilterChinese) {        return !ifFilterChinese ? (JspElementTH)JspElementTH.newInstance(fieldChineseName) : findMatchPureTh(fieldChineseName);    }    public static JspElementTH findMatchPureTh(String fieldChineseName) {        fieldChineseName = filterChineseName(fieldChineseName);        JspElementTH jes = (JspElementTH)JspElementTH.newInstance(fieldChineseName);        return jes;    }    public void addSimpleAttr(String attrKey, String attrValue) {        this.attrMap.put(attrKey, createAttrSimple(attrKey, attrValue));    }    public static String buildJsFunctionContent(String functionName, Map<String, String> funParams, String content) {        MyStringBuffer sb = MyStringBuffer.newInstance();        sb.append(new String[]{buildJsFunctionDefine(functionName, funParams, false)});        sb.appendK(new String[]{"{"});        sb.appendK(new String[]{content});        sb.appendK(new String[]{"}"});        return sb.toString();    }    public static String buildJsFunctionDefine(String functionName, Map<String, String> funParams, boolean callOrBeCall) {        MyStringBuffer result = MyStringBuffer.newInstance();        MyStringBuffer sb = MyStringBuffer.newInstance();        if (funParams != null) {            Iterator var6 = funParams.entrySet().iterator();            while(var6.hasNext()) {                Entry<String, String> entry = (Entry)var6.next();                String useStr = (String)entry.getKey();                if (callOrBeCall) {                    useStr = "'" + (String)entry.getValue() + "'";                }                if (StringUtils.isEmpty(sb.toString())) {                    sb.append(new String[]{useStr});                } else {                    sb.append(new String[]{",", useStr});                }            }        }        result.append(new String[]{functionName, "("});        result.append(new String[]{sb.toString()});        result.append(new String[]{")"});        return result.toString();    }    public String getElementCode() {        return this.elementCode;    }    public void setElementCode(String elementCode) {        this.elementCode = elementCode;    }    public boolean isIfFormElement() {        return this.ifFormElement;    }    public void setIfFormElement(boolean ifFormElement) {        this.ifFormElement = ifFormElement;    }    public TjLinkedMap<String, JspAttribute> getAttrMap() {        return this.attrMap;    }    public void setAttrMap(TjLinkedMap<String, JspAttribute> attrMap) {        this.attrMap = attrMap;    }    public List<JspElement> getChildList() {        return this.childList;    }    public void setChildList(List<JspElement> childList) {        this.childList = childList;    }    public static String findTableFieldChineseName(Class tableClass, String fieldName, Map<String, String> currFieldChineseNameMap) {        if (currFieldChineseNameMap.containsKey(fieldName)) {            return (String)currFieldChineseNameMap.get(fieldName);        } else {            TableColumn tc = findTableColumn(tableClass, fieldName);            if (tc == null) {                return fieldName;            } else {                String comment = tc.getComments();                if (StringUtils.isEmpty(comment)) {                    comment = fieldName + "未配置";                }                return comment;            }        }    }    public void addChild(JspElement... eles) {        JspElement[] var5 = eles;        int var4 = eles.length;        for(int var3 = 0; var3 < var4; ++var3) {            JspElement ele = var5[var3];            if (ele != null) {                this.childList.add(ele);            }        }    }    public static TableColumn findTableColumn(Class tableClass, String fieldName) {        BaseEntity be = null;        try {            be = (BaseEntity)tableClass.newInstance();        } catch (IllegalAccessException | InstantiationException var5) {            var5.printStackTrace();        }        Map<String, TableColumn> dest = be.findTableFieldDescMap();        if (dest != null && dest.containsKey(fieldName)) {            TableColumn tc = (TableColumn)dest.get(fieldName);            return tc;        } else {            return null;        }    }    public static JspAttribute createAttrSimple(String attrName, String content) {        JspAttribute ja = new JspAttribute();        ja.setIfStatic(true);        ja.setAttrCovertValue(content);        return ja;    }    public JspAttribute createAttrBasicEl(String tableName, String attrName) {        JspAttribute ja = new JspAttribute();        ja.setTableName(tableName);        ja.setAttrName(attrName);        ja.setAttrOriginValue((String)null);        ja.setAttrCovertValue(this.toAddElExpress(tableName, attrName));        return ja;    }    public JspAttribute createAttrElConvert(String entityName, String attrName, String toolName, String functionName, Map... extendParams) {        JspAttribute ja = new JspAttribute();        ja.setTableName(entityName);        ja.setAttrName(attrName);        ja.setIfContainElExpress(true);        Map<String, Object> extendParam = null;        if (extendParams != null && extendParams.length > 0) {            extendParam = extendParams[0];        }        ja.setAttrCovertValue(this.toAddElConvertFunctionExpress(entityName, attrName, toolName, functionName, extendParam));        return ja;    }    public JspAttribute createAttrDateFormatElConvert(String entityName, String attrName, String functionName, String formatPattern) {        JspAttribute ja = new JspAttribute();        ja.setTableName(entityName);        ja.setAttrName(attrName);        ja.setIfContainElExpress(true);        Map<String, Object> extendParams = Maps.newHashMap();        if (StringUtils.isNotEmpty(formatPattern)) {            extendParams.put("datePattern", formatPattern);        }        ja.setAttrCovertValue(this.toAddElConvertFunctionExpress(entityName, attrName, "DateUtils", functionName, extendParams));        return ja;    }    private String toAddElConvertFunctionExpress(String tableName, String fieldName, String toolName, String functionName, Map<String, Object> extendParams) {        MyStringBuffer sb = MyStringBuffer.newInstance();        if (StringUtils.isEmpty(toolName)) {            toolName = "FieldValueConvertFinder";        }        if (StringUtils.isEmpty(functionName)) {            functionName = "findData";        }        if (toolName.equals("StringUtils")) {            Integer length = 20;            if (extendParams != null && extendParams.containsKey("abbrLength")) {                length = new Integer(extendParams.get("abbrLength").toString());            }            sb.append(new String[]{toolName, ".", functionName, "("});            sb.append(new String[]{tableName, ".", fieldName, ",", length.toString(), ")"});        } else {            String idValue;            if (toolName.equals("DateUtils")) {                idValue = "yyyy-MM-dd";                if (extendParams != null && extendParams.containsKey("datePattern")) {                    idValue = extendParams.get("datePattern").toString();                }                sb.append(new String[]{toolName, ".", functionName, "("});                sb.append(new String[]{tableName, ".", fieldName, ",", MyStringBuffer.addSingleQuote(idValue), ")"});            } else if (toolName.equals("FieldValueConvertFinder")) {                sb.append(new String[]{toolName, ".", functionName, "("});                sb.append(new String[]{MyStringBuffer.addSingleQuote(tableName), ",", MyStringBuffer.addSingleQuote(fieldName)});                int specialValue = 0;                if (extendParams != null && extendParams.containsKey("specialValue")) {                    specialValue = new Integer(extendParams.get("specialValue").toString());                }                if (functionName.equals("findDataValue")) {                    sb.append(new String[]{",", this.mainEntityNameForByFinder == null ? tableName : this.mainEntityNameForByFinder, ".", fieldName, ",", String.valueOf(specialValue), ")"});                } else {                    sb.append(new String[]{",", String.valueOf(specialValue), ")"});                }            } else if (toolName.equals("JspTool") && (functionName.equals("findJoinTableData") || functionName.equals("findJoinTableDataValue"))) {                sb.append(new String[]{toolName, ".", functionName, "("});                if (functionName.equals("findJoinTableDataValue")) {                    idValue = extendParams.get("idValue").toString();                    String joinTableEntityName = extendParams.get("joinTableEntityName").toString();                    String[] showFields = (String[])extendParams.get("showFields");                    String showFieldsStr = ListUtils.ListToString(ListUtils.arrayToList(showFields), ",");                    sb.append(new String[]{MyStringBuffer.addSingleQuote(joinTableEntityName), ",", MyStringBuffer.addSingleQuote(showFieldsStr)});                    sb.append(new String[]{",", idValue});                    if (extendParams.get("relationKeyFieldName") != null && StringUtils.isNotEmpty(extendParams.get("relationKeyFieldName").toString())) {                        sb.append(new String[]{",", MyStringBuffer.addSingleQuote(extendParams.get("relationKeyFieldName").toString())});                    }                } else {                    sb.append(new String[]{"joinTable", ",", "showFields"});                }                sb.append(new String[]{")"});            } else {                sb.append(new String[]{toolName, ".", functionName, "("});                sb.append(new String[]{tableName, ",", fieldName, ")"});            }        }        return sb.toString();    }    private String toAddElExpress(String prefix, String attrOriginValue) {        if (StringUtils.isEmpty(prefix)) {            attrOriginValue = "${requestScope[" + attrOriginValue + "]}";        } else {            attrOriginValue = "${" + prefix + "." + attrOriginValue + "}";        }        return attrOriginValue;    }    public void printElement(String elementCode, Map<String, JspAttribute> attrs) {        Element result = new Element(elementCode);        Iterator var5 = attrs.entrySet().iterator();        while(var5.hasNext()) {            Entry<String, JspAttribute> entry = (Entry)var5.next();            JspAttribute ha = (JspAttribute)entry.getValue();            String convertValue = ha.getAttrCovertValue();            if ("tjText".equals(entry.getKey())) {                if (StringUtils.isNotEmpty(convertValue)) {                    result.appendText(convertValue);                }            } else if (StringUtils.isNotEmpty(convertValue)) {                MyStringBuffer sb = MyStringBuffer.newInstance();                sb.append(new String[]{"${", this.queryCondPrintPrefix, ".attrMap['", (String)entry.getKey(), "'].attrCovertValue}"});                result.attr((String)entry.getKey(), sb.toString());            }        }        System.out.println("*******" + result.outerHtml());    }    public Element bulidElement(String elementCode, Map<String, JspAttribute> attrs) {        Element result = new Element(elementCode);        Iterator var5 = attrs.entrySet().iterator();        while(var5.hasNext()) {            Entry<String, JspAttribute> entry = (Entry)var5.next();            JspAttribute ha = (JspAttribute)entry.getValue();            if (ha != null) {                String convertValue = ha.getAttrCovertValue();                if ("tjText".equals(entry.getKey())) {                    if (StringUtils.isNotEmpty(convertValue)) {                        result.appendText(convertValue);                    }                } else if (StringUtils.isNotEmpty(convertValue)) {                    result.attr((String)entry.getKey(), convertValue);                }            }        }        return result;    }    public void bulidElementChild_digui(Element origin, List<JspElement> currChildList) {        Iterator var4 = currChildList.iterator();        while(var4.hasNext()) {            JspElement je = (JspElement)var4.next();            Element child = this.bulidElement(this.appendFormPrefxi(je.ifFormElement, je.getElementCode()), je.attrMap);            origin.insertChildren(0, new Node[]{child});            this.bulidElementChild_digui(child, je.getChildList());        }    }    private String appendFormPrefxi(boolean ifformelement, String elementCode) {        if (ifformelement) {            elementCode = "form:" + elementCode;        }        return elementCode;    }    public String getFieldChineseName() {        return this.fieldChineseName;    }    public void setFieldChineseName(String fieldChineseName) {        this.fieldChineseName = fieldChineseName;    }    public String getHtml() {        this.genCode();        return this.html;    }    public void setHtml(String html) {        this.html = html;    }    public JspElement getCorrespondJspElement() {        return this.correspondJspElement;    }    public void setCorrespondJspElement(JspElement correspondJspElement) {        this.correspondJspElement = correspondJspElement;    }    public String getQueryCondPrintPrefix() {        return this.queryCondPrintPrefix;    }    public void setQueryCondPrintPrefix(String queryCondPrintPrefix) {        this.queryCondPrintPrefix = queryCondPrintPrefix;    }    public String getShowHideElExpress() {        return this.showHideElExpress;    }    public void setShowHideElExpress(String showHideElExpress) {        this.showHideElExpress = showHideElExpress;    }    public String getShiroHasPermission() {        return this.shiroHasPermission;    }    public void setShiroHasPermission(String shiroHasPermission) {        this.shiroHasPermission = shiroHasPermission;    }    public <T> T removeValidateByClass(String validateType) {        JspAttribute classJa = (JspAttribute)this.attrMap.get("class");        if (classJa != null) {            String convertValue = classJa.getAttrCovertValue();            if (convertValue == null) {                convertValue = "";            }            if (convertValue.contains(validateType)) {                convertValue = convertValue.replace(" " + validateType, "");                classJa.setAttrCovertValue(convertValue);            }        }        return this;    }    public <T> T addValidateByClass(String validateType) {        return this.addValidateByClass(validateType, (String)null);    }    public <T> T addValidateByClass(String validateType, String className) {        if (StringUtils.isEmpty(className)) {            className = "class";        }        JspAttribute classJa = (JspAttribute)this.attrMap.get(className);        if (classJa != null) {            String convertValue = classJa.getAttrCovertValue();            if (convertValue == null) {                convertValue = "";            }            if (!convertValue.contains(validateType)) {                convertValue = convertValue + " " + validateType;                classJa.setAttrCovertValue(convertValue);            }        } else {            this.addSimpleAttr("class", validateType);        }        return this;    }    public <T> T removeValidateWithValue(String validateType) {        if (this.attrMap.containsKey(validateType)) {            this.attrMap.remove(validateType);        }        return this;    }    public <T> T addValidateWithValue(String validateType, String value1, String value2) {        label68: {            switch(validateType.hashCode()) {                case -1505266481:                    if (!validateType.equals("equalTo")) {                        return this;                    }                    break label68;                case -612557761:                    if (!validateType.equals("extension")) {                        return this;                    }                    break label68;                case -393139297:                    if (!validateType.equals("required")) {                        return this;                    }                    break label68;                case -74460573:                    if (!validateType.equals("rangelength")) {                        return this;                    }                    break;                case 107876:                    if (!validateType.equals("max")) {                        return this;                    }                    break label68;                case 108114:                    if (!validateType.equals("min")) {                        return this;                    }                    break label68;                case 108280125:                    if (!validateType.equals("range")) {                        return this;                    }                    break;                case 124732746:                    if (!validateType.equals("maxlength")) {                        return this;                    }                    break label68;                case 897211320:                    if (!validateType.equals("minlength")) {                        return this;                    }                    break label68;                default:                    return this;            }            this.addSimpleAttr(validateType, "[" + value1 + "," + value2 + "]");            return this;        }        this.addSimpleAttr(validateType, value1);        return this;    }    public String getFieldName() {        return this.fieldName;    }    public void setFieldName(String fieldName) {        this.fieldName = fieldName;    }    public String getEntityName() {        return this.entityName;    }    public void setEntityName(String entityName) {        this.entityName = entityName;    }    public static String filterChineseName(String origin) {        String result = "";        result = filterBrackets(origin);        result = filterChineseNameEnglish(result);        return result;    }    public static String filterBrackets(String origin) {        if (StringUtils.isEmpty(origin)) {            return origin;        } else {            if ((origin.contains("(") || origin.contains("（")) && (origin.contains(")") || origin.contains("）"))) {                origin = origin.replace("（", "(");                origin = origin.replace("）", ")");                String content = origin.substring(origin.indexOf("(") + 1, origin.indexOf(")"));                if (content.length() <= 2) {                    return origin;                }            }            if (origin.contains("(")) {                origin = origin.substring(0, origin.indexOf("("));            }            if (origin.contains("（")) {                origin = origin.substring(0, origin.indexOf("（"));            }            return origin;        }    }    public static String filterChineseNameEnglish(String origin) {        return origin;    }    public static String findJsFragFromFreemarker(Map<String, Object> model, String templateFileName, String templatePath) {        String result = "";        GenTemplate tpl = (GenTemplate)FreeMarkerTools.fileToObject(templateFileName, GenTemplate.class, templatePath);        try {            result = FreeMarkers.renderString(StringUtils.trimToEmpty(tpl.getContent()), model, new String[0]);        } catch (Exception var6) {            var6.printStackTrace();        }        return result;    }    protected void filterToAddValidateByClass(TableColumn tc) {        if (tc != null && tc.getFormFieldValidateList() != null && tc.getFormFieldValidateList().size() > 0) {            Iterator var3 = tc.getFormFieldValidateList().iterator();            while(var3.hasNext()) {                String validateType = (String)var3.next();                if (!"required".equals(validateType)) {                    this.addValidateByClass(validateType);                }            }        }    }    public String getChildElementCode() {        return this.childElementCode;    }    public void setChildElementCode(String childElementCode) {        this.childElementCode = childElementCode;    }    public boolean isIfDynaTableElement() {        return this.ifDynaTableElement;    }    public void setIfDynaTableElement(boolean ifDynaTableElement) {        this.ifDynaTableElement = ifDynaTableElement;    }}