package com.base.common.utils;import org.apache.http.NameValuePair;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.utils.URIBuilder;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.*;import java.net.HttpURLConnection;import java.net.URI;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Map;public class HttpUtils {    private static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);    /**     * 执行get请求     * @param url     * @param param     * @return     */    public static String get(String url, Map<String, String> param) {        // 创建Httpclient对象        CloseableHttpClient httpclient = HttpClients.createDefault();        String resultString = "";        CloseableHttpResponse response = null;        try {            // 创建uri            URIBuilder builder = new URIBuilder(url);            if (param != null) {                for (String key : param.keySet()) {                    builder.addParameter(key, param.get(key));                }            }            URI uri = builder.build();            // 创建http GET请求            HttpGet httpGet = new HttpGet(uri);            // 执行请求            response = httpclient.execute(httpGet);            // 判断返回状态是否为200            if (response.getStatusLine().getStatusCode() == 200) {                resultString = EntityUtils.toString(response.getEntity(), "UTF-8");            }        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                if (response != null) {                    response.close();                }                httpclient.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return resultString;    }    public static String get(String url) {        return get(url, null);    }    /**     * 执行post请求     * @param url     * @param param     * @param head     * @return     */    public static String post(String url, Map<String, Object> param,Map<String, Object> head) {        // 创建Httpclient对象        CloseableHttpClient httpClient = HttpClients.createDefault();        CloseableHttpResponse response = null;        String resultString = "";        try {            // 创建Http Post请求            HttpPost httpPost = new HttpPost(url);            //httpPost.addHeader("Content-type", "application/json; charset=utf-8");            //httpPost.setHeader("Accept", "application/json");            if(head!=null){                for (String key : head.keySet()) {                    httpPost.addHeader(key,(String) head.get(key));                }            }            // 创建参数列表            if (param != null) {                List<NameValuePair> paramList = new ArrayList<NameValuePair>();                for (String key : param.keySet()) {                    paramList.add(new BasicNameValuePair(key, (String) param.get(key)));                }                // 模拟表单                UrlEncodedFormEntity entity = new UrlEncodedFormEntity(paramList);                httpPost.setEntity(entity);            }            // 执行http请求            response = httpClient.execute(httpPost);            resultString = EntityUtils.toString(response.getEntity(), "utf-8");        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                if (response != null) {                    response.close();                }                httpClient.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return resultString;    }    public static String post(String url) {        return post(url, null,null);    }    public static String post(String url, Map<String, Object> param) {        return post(url, param,null);    }    /**     * 根据url下载到指定目录下     * @param urlStr     * @param file     * @throws IOException     */    public static void  downLoadFromUrl(String urlStr,File file) throws IOException {        URL url = new URL(urlStr);        HttpURLConnection conn = (HttpURLConnection)url.openConnection();        //设置超时间为3秒        conn.setConnectTimeout(3*1000);        //防止屏蔽程序抓取而返回403错误        conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)");        //得到输入流        InputStream inputStream = conn.getInputStream();        //获取自己数组        byte[] getData = readInputStream(inputStream);        //文件保存位置        FileOutputStream fos = new FileOutputStream(file);        fos.write(getData);        if(fos!=null){            fos.close();        }        if(inputStream!=null){            inputStream.close();        }        System.out.println("info:"+url+" download success");    }    /**     * 从输入流中获取字节数组     * @param inputStream     * @return     * @throws IOException     */    public static  byte[] readInputStream(InputStream inputStream) throws IOException {        byte[] buffer = new byte[1024];        int len = 0;        ByteArrayOutputStream bos = new ByteArrayOutputStream();        while((len = inputStream.read(buffer)) != -1) {            bos.write(buffer, 0, len);        }        bos.close();        return bos.toByteArray();    }}