package com.base.common.utils;import org.springframework.stereotype.Component;import javax.activation.DataHandler;import javax.activation.DataSource;import javax.activation.FileDataSource;import javax.mail.*;import javax.mail.internet.*;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Properties;@Componentpublic class SendMailUtils {    public SendMailUtils() {        super();    }    public static void main(String[] args) throws Exception {        File file = new File("C:\\Users\\lihongbo\\Desktop\\项目接口文档.doc");        sendMailFunction("976757427@qq.com",file,"3099570965@qq.com","mppbfjnnbeycdgcb");    }    /**     *发送带附件的邮件     * @param recipientAddress  要发送的邮箱地址，可以支持多个，不过需要用逗号分隔     * @param content  附件内容     * @param account  发件人账号     * @param authorizationCode  发件人邮箱授权码(需要用户在邮箱网页中点击设置--->账号--->开启POP3/SMTP服务)     * @throws Exception     */    public static void sendMailFunction(String recipientAddress,File content,String account,String authorizationCode) throws Exception {        // 1、连接邮件服务器的参数配置        Properties props = new Properties();        props.setProperty("mail.smtp.host", "smtp.qq.com");        props.setProperty("mail.smtp.auth", "true");//开启认证        props.setProperty("mail.debug", "true");//启用调试        props.setProperty("mail.smtp.timeout", "1000");//设置链接超时        props.setProperty("mail.transport.protocol", "smtp"); // 更改处        props.setProperty("mail.smtp.port", "465");//设置端口  TODO 为什么用465端口，是因为阿里云将25端口封了，需要解封，特别麻烦，所以用465端口代替        props.setProperty("mail.smtp.socketFactory.port", "465");//设置ssl端口        props.setProperty("mail.smtp.socketFactory.fallback", "false");        props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");        // 2、创建定义整个应用程序所需的环境信息的 Session 对        Session session = Session.getInstance(props);        // 设置调试信息在控制台打印出来        session.setDebug(false);        // 3、创建邮件的实例对象        Message msg = getMimeMessage(session, recipientAddress,content,account);        // 4、根据session对象获取邮件传输对象Transport        Transport transport = session.getTransport();        // 设置发件人的账户名和密码        transport.connect(account,authorizationCode);        transport.sendMessage(msg, msg.getAllRecipients());        // 5、关闭邮件连接        transport.close();    }    public static MimeMessage getMimeMessage(Session session, String recipientAddress, File content, String account) throws Exception {        // 创建一封邮件的实例对象        MimeMessage msg = new MimeMessage(session);        // 设置发件人地址        msg.setFrom(new InternetAddress(account));        /**         * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行 MimeMessage.RecipientType.TO:发送         * MimeMessage.RecipientType.CC：抄送 MimeMessage.RecipientType.BCC：密送         */        if(recipientAddress.contains(",")){            List<InternetAddress> list = new ArrayList<InternetAddress>();            String []median=recipientAddress.split(",");            for(int i=0;i<median.length;i++){                list.add(new InternetAddress(median[i]));            }            InternetAddress[] address =list.toArray(new InternetAddress[list.size()]);            msg.setRecipients(Message.RecipientType.TO,address);        }else{            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(recipientAddress));        }        // 设置邮件主题        // 设置邮件主题        msg.setSubject("您收到一份来自LEW的课件", "UTF-8");        // 设置邮件正文        MimeBodyPart part1 = new MimeBodyPart();        part1.setContent("您收到一份来自LEW的课件，详情请看附件。", "text/html;charset= GB2312");        // 设置邮件的发送时间,默认立即发送        msg.setSentDate(new Date());        // 附件部分        Multipart multipart = new MimeMultipart();        multipart.addBodyPart(part1);        multipart = buildContent(multipart, content);        msg.setContent(multipart);        return msg;    }    public  static Multipart buildContent(Multipart multipart, File content) throws IOException, MessagingException {        BodyPart messageBodyPart = new MimeBodyPart();        messageBodyPart = new MimeBodyPart();        // 设置要发送附件的文件路径        DataSource source = new FileDataSource(content);        messageBodyPart.setDataHandler(new DataHandler(source));        // 处理附件名称中文（附带文件路径）乱码问题        messageBodyPart.setFileName(MimeUtility.encodeText(content.getName()));        multipart.addBodyPart(messageBodyPart);        return multipart;    }}